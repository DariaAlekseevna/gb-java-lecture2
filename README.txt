Что такое API для нас на примерах:

1. Строки

 * lec2_1.java - скорость конкотенации и stringbuilder
 * lec2_2.java - массив из строк в строку и наоборот,join, toLowerCase.
 
    concat(): объединение строк
    valueOf(): преобразует Object в строковое представление (завязан на toString())
    join(): объединяет набор строк в одну с учетом разделителя
    charAt(): получение символа по индексу
    indexOf(): первый индекс вхождения подстроки
    lastIndexOf(): последний индекс вхождения подстроки
    startsWith()/endsWith(): определяет, начинается/заканчивается ли строка с подстроки
    replace(): замена одной подстроки на другу
    trim(): удаляет начальные и конечные пробелы
    substring(): возвращает подстроку, см.аргументы
    toLowerCase()/toUpperCase(): возвращает новую строку в нижнем/верхнем регистре
    сompareTo(): сравнивает две строки
    equals(): сравнивает строки с учетом регистра
    equalsIgnoreCase(): сравнивает строки без учета регистра
    regionMatches(): сравнивает подстроки в строках

    много изменений - string
    много преобразований - stringbuilder

2. Работа с файловой системой

 * lec2_3.java - путь к файлу
 * lec2_4.java - работа с файлом txt: чтение строки, вывод в консоль, запись в файл, создание файла; конструкция try catch;
 * lec2_5.java - бинарные файлы функционал для сохранения, запись, чтения, добавления и удаления.
 * test.bin -  бинарный файл для lec2_5.java

    внутри есть два основных столпа: каталоги и файлы
    для работы с файлами File
    либо созраняем файл и делаем манипуляции
    либо сохраняем часть файла и делаем манипуляции

    File <имя> = new File(<полный путь к файлу>);
    File f1 = new File("/Users/sk/vscode/java_projects/file.txt");(прямой путь) или  = new File("file.txt"); (относительный путь)

    Ошибки типичные:
    -неправильный путь
    -неверное имя файла
    -файл слишком большой, не хватило памяти
    -файл пустой
    -битый файл
    -файл открыт сторонней программой
    -отсутствие файла
    -файл неверного типа

    try {
    Код, в котором может появиться ошибка
    } catch (Exception e) {
    Обработка, если ошибка случилась
    }
    finally {
    Код, который выполнится в любом случае
    }

    Бинарные файлы - информация представлена побитово
    основной функционал: считать данные, создать данные/файл, вставка данных, поиск данных

3. Логирование (журналирование)
 
 * lec2_6.java - логирование, уровни ошибок, запись в xml/в консоль, формат вывода - текстовый или xml.
 * log.txt - файл для lec2_6.java

    есть определенное API позволяющее воспользовать данным функционалом.
    Суть - когда создаются системы, постепенно появляются сбои, и чтобы понять где именно произошла ошибка нужно Логирование;
    Нужно понять, что приело к ошибке, нажатие каждой кнопки и выполнение каждого метода по хорошему должно быть записано в журнал;
    Просмотрев в журнале все действия которые привели к ошибке, можно отладить систему;
    Для того чтобы добавить логирование в свою систему - нужно создать переменную типа Logger;
    Уровни важности ошибки(основные):
    * INFO - информационные сообщения
    * DEBUG - 
    * ERROR
    * WARNING
    куда показывать/сохранять логи - Handler
    в каком формате - в виде сообщений или xml файлы
